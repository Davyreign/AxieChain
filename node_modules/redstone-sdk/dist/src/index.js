"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestRedstonePayload = exports.requestDataPackages = exports.getDataServiceIdForSigner = exports.getOracleRegistryState = exports.DEFAULT_CACHE_SERVICE_URLS = void 0;
const axios_1 = __importDefault(require("axios"));
const initial_state_json_1 = __importDefault(require("redstone-oracles-smartweave-contracts/src/contracts/redstone-oracle-registry/initial-state.json"));
const redstone_protocol_1 = require("redstone-protocol");
exports.DEFAULT_CACHE_SERVICE_URLS = [
    "https://cache-1.redstone.finance",
    "https://cache-2.redstone.finance",
    "https://cache-3.redstone.finance",
    "https://cache-1-streamr.redstone.finance",
    "https://cache-2-streamr.redstone.finance",
];
const getOracleRegistryState = async () => {
    return initial_state_json_1.default;
};
exports.getOracleRegistryState = getOracleRegistryState;
const getDataServiceIdForSigner = (oracleState, signerAddress) => {
    for (const nodeDetails of Object.values(oracleState.nodes)) {
        if (nodeDetails.evmAddress.toLowerCase() === signerAddress.toLowerCase()) {
            return nodeDetails.dataServiceId;
        }
    }
    throw new Error(`Data service not found for ${signerAddress}`);
};
exports.getDataServiceIdForSigner = getDataServiceIdForSigner;
const parseDataPackagesResponse = (dpResponse) => {
    const parsedResponse = {};
    for (const [dataFeedId, dataFeedPackages] of Object.entries(dpResponse)) {
        parsedResponse[dataFeedId] = dataFeedPackages.map((dataPackage) => redstone_protocol_1.SignedDataPackage.fromObj(dataPackage));
    }
    return parsedResponse;
};
const errToString = (e) => {
    if (e instanceof AggregateError) {
        const stringifiedErrors = e.errors.reduce((prev, oneOfErrors, curIndex) => (prev += `${curIndex}: ${oneOfErrors.message}, `), "");
        return `${e.message}: ${stringifiedErrors}`;
    }
    else {
        return e.message;
    }
    //   let errMessage = "";
    //   errMessage += "Aggregate error: ";
    //   e.forEach((oneOfErrors, index) => {
    //     errMessage += `${index}: ${oneOfErrors.message}, `;
    //   });
    //   return errMessage;
    // } else {
    //   return e.message;
    // }
};
const requestDataPackages = async (reqParams, urls = exports.DEFAULT_CACHE_SERVICE_URLS) => {
    const promises = urls.map((url) => {
        var _a;
        return axios_1.default.get(url + "/data-packages/latest", {
            params: {
                "data-service-id": reqParams.dataServiceId,
                "unique-signers-count": reqParams.uniqueSignersCount,
                "data-feeds": (_a = reqParams.dataFeeds) === null || _a === void 0 ? void 0 : _a.join(","),
            },
        });
    });
    try {
        const response = await Promise.any(promises);
        return parseDataPackagesResponse(response.data);
    }
    catch (e) {
        const errMessage = `Request failed ${JSON.stringify({
            reqParams,
            urls,
        })}, Original error: ${errToString(e)}`;
        throw new Error(errMessage);
    }
};
exports.requestDataPackages = requestDataPackages;
const requestRedstonePayload = async (reqParams, urls = exports.DEFAULT_CACHE_SERVICE_URLS, unsignedMetadataMsg) => {
    const signedDataPackagesResponse = await (0, exports.requestDataPackages)(reqParams, urls);
    const signedDataPackages = [];
    for (const packages of Object.values(signedDataPackagesResponse)) {
        signedDataPackages.push(...packages);
    }
    return redstone_protocol_1.RedstonePayload.prepare(signedDataPackages, unsignedMetadataMsg || "");
};
exports.requestRedstonePayload = requestRedstonePayload;
exports.default = {
    getOracleRegistryState: exports.getOracleRegistryState,
    requestDataPackages: exports.requestDataPackages,
    getDataServiceIdForSigner: exports.getDataServiceIdForSigner,
    requestRedstonePayload: exports.requestRedstonePayload,
};
//# sourceMappingURL=index.js.map