import { RedstoneOraclesState } from "redstone-oracles-smartweave-contracts/src/contracts/redstone-oracle-registry/types";
import { SignedDataPackage } from "redstone-protocol";
export declare const DEFAULT_CACHE_SERVICE_URLS: string[];
export interface DataPackagesRequestParams {
    dataServiceId: string;
    uniqueSignersCount: number;
    dataFeeds?: string[];
}
export interface DataPackagesResponse {
    [dataFeedId: string]: SignedDataPackage[];
}
export declare const getOracleRegistryState: () => Promise<RedstoneOraclesState>;
export declare const getDataServiceIdForSigner: (oracleState: RedstoneOraclesState, signerAddress: string) => string;
export declare const requestDataPackages: (reqParams: DataPackagesRequestParams, urls?: string[]) => Promise<DataPackagesResponse>;
export declare const requestRedstonePayload: (reqParams: DataPackagesRequestParams, urls?: string[], unsignedMetadataMsg?: string) => Promise<string>;
declare const _default: {
    getOracleRegistryState: () => Promise<RedstoneOraclesState>;
    requestDataPackages: (reqParams: DataPackagesRequestParams, urls?: string[]) => Promise<DataPackagesResponse>;
    getDataServiceIdForSigner: (oracleState: RedstoneOraclesState, signerAddress: string) => string;
    requestRedstonePayload: (reqParams: DataPackagesRequestParams, urls?: string[], unsignedMetadataMsg?: string | undefined) => Promise<string>;
};
export default _default;
//# sourceMappingURL=index.d.ts.map