"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvalancheDataServiceConsumerBase__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receviedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampSeconds",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "blockTimestamp",
                type: "uint256",
            },
        ],
        name: "TimestampFromTooLongFuture",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampSeconds",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "blockTimestamp",
                type: "uint256",
            },
        ],
        name: "TimestampIsTooOld",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506108a3806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633ce142f514610051578063b24ebfcc1461007b578063f50b2efe1461009c578063f90c4924146100b1575b600080fd5b61006461005f36600461065f565b6100b8565b60405160ff90911681526020015b60405180910390f35b61008e610089366004610693565b6103c1565b604051908152602001610072565b6100af6100aa366004610771565b6103d2565b005b600a610064565b600073981bda8276ae93f567922497153de7a5683708d373ffffffffffffffffffffffffffffffffffffffff831614156100f457506000919050565b733befdd935b50f172e696a5187dbacfef0d208e4873ffffffffffffffffffffffffffffffffffffffff8316141561012e57506001919050565b73c1d5b940659e57b7bdf8870cdfc43f41ca69946073ffffffffffffffffffffffffffffffffffffffff8316141561016857506002919050565b731cd8f9627a2838a7dae6b98cf71c08b9cbf5174a73ffffffffffffffffffffffffffffffffffffffff831614156101a257506003919050565b73bc5a06815ee80de7d20071703c1f1b8fc511c7d473ffffffffffffffffffffffffffffffffffffffff831614156101dc57506004919050565b73e9fa2869c5f6fc3a0933981825564fd90573a86d73ffffffffffffffffffffffffffffffffffffffff8316141561021657506005919050565b73df6b1ca313bee470d0142279791fa760abf5c53773ffffffffffffffffffffffffffffffffffffffff8316141561025057506006919050565b73a50abc5d76dab99d5fe59fd32f239bd37d55025f73ffffffffffffffffffffffffffffffffffffffff8316141561028a57506007919050565b73496f4e8ac11076350a59b88d2ad62bc20d410ea373ffffffffffffffffffffffffffffffffffffffff831614156102c457506008919050565b7341fb6b8d0f586e73d575bc57cfd29142b3214a4773ffffffffffffffffffffffffffffffffffffffff831614156102fe57506009919050565b73c1068312a6333e6601f937c4773065b70d38a5bf73ffffffffffffffffffffffffffffffffffffffff831614156103385750600a919050565b73ae9d49ea64df38b9fcbc238bc7004a1421f7eee873ffffffffffffffffffffffffffffffffffffffff831614156103725750600b919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60006103cc826103de565b92915050565b6103db816103e9565b50565b60006103cc8261049f565b60006103f76103e8836107a1565b90508042101561045257603c61040d42836107b5565b111561044e576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016103b8565b5050565b60b461045e82426107b5565b111561044e576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016103b8565b60008151600014156104dd576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104e6826105fe565b6000600283516104f691906107a1565b90506002835161050691906107cc565b6105b55760006105a08461051b6001856107b5565b81518110610552577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858481518110610593577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161064c565b90506105ad6002826107a1565b949350505050565b8281815181106105ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050919050565b8051602082016020820281019150805b8281101561064657815b8181101561063d578151815180821015610633578084528183525b5050602001610618565b5060200161060e565b50505050565b60006106588284610789565b9392505050565b600060208284031215610670578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610658578182fd5b600060208083850312156106a5578182fd5b823567ffffffffffffffff808211156106bc578384fd5b818501915085601f8301126106cf578384fd5b8135818111156106e1576106e161083e565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156107245761072461083e565b604052828152858101935084860182860187018a1015610742578788fd5b8795505b83861015610764578035855260019590950194938601938601610746565b5098975050505050505050565b600060208284031215610782578081fd5b5035919050565b6000821982111561079c5761079c6107e0565b500190565b6000826107b0576107b061080f565b500490565b6000828210156107c7576107c76107e0565b500390565b6000826107db576107db61080f565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220066fb394e016a787207beedc4d9f547a54269515102b68348f57e3e768cdaabc64736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class AvalancheDataServiceConsumerBase__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.AvalancheDataServiceConsumerBase__factory = AvalancheDataServiceConsumerBase__factory;
AvalancheDataServiceConsumerBase__factory.bytecode = _bytecode;
AvalancheDataServiceConsumerBase__factory.abi = _abi;
//# sourceMappingURL=AvalancheDataServiceConsumerBase__factory.js.map