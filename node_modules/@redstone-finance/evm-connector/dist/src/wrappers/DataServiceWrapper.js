"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataServiceWrapper = void 0;
const redstone_sdk_1 = require("redstone-sdk");
const BaseWrapper_1 = require("./BaseWrapper");
const package_json_1 = require("../../package.json");
class DataServiceWrapper extends BaseWrapper_1.BaseWrapper {
    constructor(dataPackagesRequestParams, urls) {
        super();
        this.dataPackagesRequestParams = dataPackagesRequestParams;
        this.urls = urls;
    }
    getUnsignedMetadata() {
        return `${package_json_1.version}#${this.dataPackagesRequestParams.dataServiceId}`;
    }
    async getBytesDataForAppending(params) {
        const unsignedMetadataMsg = this.getUnsignedMetadata();
        const disablePayloadsDryRun = Boolean(this.dataPackagesRequestParams.disablePayloadsDryRun);
        if (disablePayloadsDryRun) {
            return this.requestPayloadWithoutDryRun(this.urls, unsignedMetadataMsg);
        }
        return this.requestPayloadWithDryRun({ ...params, unsignedMetadataMsg });
    }
    /*
      Call function on provider always returns some result and doesn't throw an error.
      Later we need to decode the result from the call (decodeFunctionResult) and
      this function will throw an error if the call was reverted.
    */
    async requestPayloadWithDryRun({ functionName, contract, transaction, unsignedMetadataMsg, }) {
        const promises = this.urls.map(async (url) => {
            const transactionToTest = Object.assign({}, transaction);
            const redstonePayload = await this.requestPayloadWithoutDryRun([url], unsignedMetadataMsg);
            transactionToTest.data = transactionToTest.data + redstonePayload;
            const result = await contract.provider.call(transactionToTest);
            contract.interface.decodeFunctionResult(functionName, result);
            return redstonePayload;
        });
        return Promise.any(promises).catch((error) => {
            throw new Error(`All redstone payloads do not pass dry run verification, aggregated errors: ${JSON.stringify(error.errors, null, 2)}`);
        });
    }
    async requestPayloadWithoutDryRun(urls, unsignedMetadataMsg) {
        return (0, redstone_sdk_1.requestRedstonePayload)(this.dataPackagesRequestParams, urls, unsignedMetadataMsg);
    }
}
exports.DataServiceWrapper = DataServiceWrapper;
//# sourceMappingURL=DataServiceWrapper.js.map