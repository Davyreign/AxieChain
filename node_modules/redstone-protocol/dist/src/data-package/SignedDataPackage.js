"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignedDataPackage = void 0;
const utils_1 = require("ethers/lib/utils");
const Serializable_1 = require("../common/Serializable");
const DataPackage_1 = require("./DataPackage");
class SignedDataPackage extends Serializable_1.Serializable {
    constructor(dataPackage, signature) {
        super();
        this.dataPackage = dataPackage;
        if (typeof signature === "string") {
            this.signature = (0, utils_1.splitSignature)(signature);
        }
        else {
            this.signature = signature;
        }
    }
    serializeSignatureToBytes() {
        return (0, utils_1.arrayify)(this.serializeSignatureToHex());
    }
    serializeSignatureToHex() {
        return (0, utils_1.joinSignature)(this.signature);
    }
    recoverSignerPublicKey() {
        const digest = this.dataPackage.getSignableHash();
        const publicKeyHex = (0, utils_1.recoverPublicKey)(digest, this.signature);
        return (0, utils_1.arrayify)(publicKeyHex);
    }
    recoverSignerAddress() {
        const signerPublicKeyBytes = this.recoverSignerPublicKey();
        return (0, utils_1.computeAddress)(signerPublicKeyBytes);
    }
    toBytes() {
        return (0, utils_1.concat)([
            this.dataPackage.toBytes(),
            this.serializeSignatureToBytes(),
        ]);
    }
    toObj() {
        const signatureHex = this.serializeSignatureToHex();
        return {
            ...this.dataPackage.toObj(),
            signature: utils_1.base64.encode(signatureHex),
        };
    }
    static fromObj(plainObject) {
        const signatureBase64 = plainObject.signature;
        if (!signatureBase64) {
            throw new Error("Signature can not be empty");
        }
        const signatureBytes = utils_1.base64.decode(signatureBase64);
        const parsedSignature = (0, utils_1.splitSignature)(signatureBytes);
        const { signature, ...unsignedDataPackagePlainObj } = plainObject;
        const unsignedDataPackage = DataPackage_1.DataPackage.fromObj(unsignedDataPackagePlainObj);
        return new SignedDataPackage(unsignedDataPackage, parsedSignature);
    }
}
exports.SignedDataPackage = SignedDataPackage;
//# sourceMappingURL=SignedDataPackage.js.map