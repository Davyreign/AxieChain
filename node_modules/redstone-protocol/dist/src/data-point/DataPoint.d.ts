import { Serializable } from "../common/Serializable";
import { ConvertableToBytes32 } from "../common/utils";
import { INumericDataPoint } from "./NumericDataPoint";
import { IStringDataPoint } from "./StringDataPoint";
export interface IStandardDataPoint {
    dataFeedId: ConvertableToBytes32;
    value: string;
}
export declare type DataPointPlainObj = INumericDataPoint | IStandardDataPoint | IStringDataPoint;
export declare class DataPoint extends Serializable {
    readonly dataFeedId: ConvertableToBytes32;
    readonly value: Uint8Array;
    constructor(dataFeedId: ConvertableToBytes32, value: Uint8Array);
    serializeDataFeedId(): Uint8Array;
    toObj(): DataPointPlainObj;
    getValueByteSize(): number;
    toBytes(): Uint8Array;
}
//# sourceMappingURL=DataPoint.d.ts.map