"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/lib/utils");
const utils_2 = require("../src/common/utils");
describe("Utils", () => {
    test("Should assert correctly", () => {
        (0, utils_2.assert)(true);
        (0, utils_2.assert)(true, "Some message");
        expect(() => (0, utils_2.assert)(false)).toThrowError("Assertion failed");
        expect(() => (0, utils_2.assert)(false, "Custom msg")).toThrowError("Assertion failed: Custom msg");
    });
    test("Should correctly convert strings to bytes32", () => {
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)("ETH"))).toBe("0x4554480000000000000000000000000000000000000000000000000000000000");
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)("BTC"))).toBe("0x4254430000000000000000000000000000000000000000000000000000000000");
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)("Still short string"))).toBe("0x5374696c6c2073686f727420737472696e670000000000000000000000000000");
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)(""))).toBe("0x0000000000000000000000000000000000000000000000000000000000000000");
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)("Long string - longer than 32 characters"))).toBe("0x521e07e3034088704b35350d34ac32d1512f3d119f60761ba2597337f2124e51");
        expect((0, utils_1.hexlify)((0, utils_2.convertStringToBytes32)("0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65"))).toBe("0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b");
    });
    test("Should correctly convert integer numbers to bytes", () => {
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(255, 2))).toBe("0x00ff");
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(15, 2))).toBe("0x000f");
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(9, 3))).toBe("0x000009");
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(65535, 2))).toBe("0xffff");
        expect(() => (0, utils_2.convertIntegerNumberToBytes)(65536, 2)).toThrowError("Overflow: value: 65536, decimals: 0, byteSize: 2");
    });
    test("Should correctly convert integer number strings to bytes", () => {
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)("9", 3))).toBe("0x000009");
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)("65535", 2))).toBe("0xffff");
        expect(() => (0, utils_2.convertIntegerNumberToBytes)("65536", 2)).toThrowError("Overflow: value: 65536, decimals: 0, byteSize: 2");
    });
    test("Should correctly convert float numbers to bytes", () => {
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(910, 4))).toBe("0x0000038e");
        expect((0, utils_1.hexlify)((0, utils_2.convertNumberToBytes)(9.1, 2, 4))).toBe("0x0000038e");
        expect((0, utils_1.hexlify)((0, utils_2.convertIntegerNumberToBytes)(421234567000, 32))).toBe("0x0000000000000000000000000000000000000000000000000000006213896758");
        expect((0, utils_1.hexlify)((0, utils_2.convertNumberToBytes)(42.1234567, 10, 32))).toBe("0x0000000000000000000000000000000000000000000000000000006213896758");
        expect(() => (0, utils_2.convertNumberToBytes)(42.1234567, 10, 4)).toThrow("Overflow: value: 42.1234567, decimals: 10, byteSize: 4");
    });
    test("Should round fractional component if it exceeds decimal", () => {
        expect(() => (0, utils_2.convertNumberToBytes)(42.123456789, 8, 32, false)).toThrow("fractional component exceeds decimals");
        expect((0, utils_1.hexlify)((0, utils_2.convertNumberToBytes)(42.123456789, 8, 32))).toBe("0x00000000000000000000000000000000000000000000000000000000fb134b4f");
    });
});
//# sourceMappingURL=utils.test.js.map